#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_BEHAVIOR_HOLD_TAP_TERM 160

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

/ {
    combos {
        compatible = "zmk,combos";

        combo_alt_spc_m {
            bindings = <&macro_alt_spc_m>;
            key-positions = <27 26>;
            layers = <2>;
        };

        combo_alt_spc_s {
            bindings = <&macro_alt_spc_s>;
            key-positions = <26 28>;
        };

        combo_shift_win_left {
            bindings = <&kp LS(LG(LEFT_ARROW))>;
            key-positions = <13 14>;
        };

        combo_shift_win_right {
            bindings = <&kp LS(LG(RIGHT_ARROW))>;
            key-positions = <27 28>;
        };

        combo_win_tab {
            bindings = <&kp LG(TAB)>;
            key-positions = <39 42>;
        };

        combo_ctl_win_left {
            bindings = <&kp LC(LG(LEFT_ARROW))>;
            key-positions = <39 40>;
        };

        combo_ctl_win_right {
            bindings = <&kp LC(LG(RIGHT_ARROW))>;
            key-positions = <42 41>;
        };

        combo_ctl_win_d {
            bindings = <&kp LC(LG(D))>;
            key-positions = <40 42>;
        };

        combo_ctl_win_f4 {
            bindings = <&kp LC(LG(F4))>;
            key-positions = <39 41>;
        };

        combo_win_l {
            bindings = <&kp LG(L)>;
            key-positions = <40 41>;
        };

        macro_alt_win_4 {
            bindings = <&kp LA(LG(NUMBER_4))>;
            key-positions = <33 34>;
        };

        macro_alt_win_5 {
            bindings = <&kp LA(LG(NUMBER_5))>;
            key-positions = <34 35>;
        };

        macro_alt_win_6 {
            bindings = <&kp LA(LG(NUMBER_6))>;
            key-positions = <35 36>;
        };

        macro_ctl_sft_a {
            bindings = <&kp LS(LC(A))>;
            key-positions = <33 35>;
        };

        macro_alt_e {
            bindings = <&kp LA(E)>;
            key-positions = <34 36>;
        };

        macro_alt_d {
            bindings = <&kp LA(D)>;
            key-positions = <33 36>;
        };

        macro_ctl_t {
            bindings = <&kp LC(T)>;
            key-positions = <47 49>;
        };

        macro_ctl_w {
            bindings = <&kp LC(W)>;
            key-positions = <48 50>;
        };

        macro_ctl_sft_t {
            bindings = <&kp LS(LC(T))>;
            key-positions = <48 49>;
        };

        macro_ctl_sft_o {
            bindings = <&kp LS(LC(O))>;
            key-positions = <47 50>;
        };

        macro_ctl_pgup {
            bindings = <&kp LC(PAGE_UP)>;
            key-positions = <47 48>;
        };

        macro_ctl_pgdown {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <49 50>;
        };
    };

    behaviors {
        mod_morph_minus_underscore: mod_morph_minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MINUS_UNDERSCORE";
            bindings = <&kp MINUS>, <&kp LS(0x87)>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        tap_dance_comma_semicolon: tap_dance_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COMMA_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        tap_dance_period_colon: tap_dance_period_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PERIOD_COLON";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp SINGLE_QUOTE>;
        };

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_EXCLAMATION";
            bindings = <&tap_dance_comma_semicolon>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_QUESTION";
            bindings = <&tap_dance_period_colon>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        tap_dance_f1_f11: tap_dance_f1_f11 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F1_F11";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F11>;
        };

        tap_dance_f2_f3: tap_dance_f2_f3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F2_F3";
            #binding-cells = <0>;
            bindings = <&kp F2>, <&kp F3>;
        };

        tap_dance_cz_cy: tap_dance_cz_cy {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CZ_CY";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
        };

        tap_dance_minus_equal: tap_dance_minus_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MINUS_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp EQUAL>;
        };

        tap_dance_slash_percent: tap_dance_slash_percent {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SLASH_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp PERCENT>;
        };

        tap_dance_exclamation_question: tap_dance_exclamation_question {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXCLAMATION_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;
        };

        tap_dance_single_double: tap_dance_single_double {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SINGLE_DOUBLE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        tab_dance_period_yen: tab_dance_period_yen {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_DANCE_PERIOD_YEN";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp BACKSLASH>;
        };
    };

    macros {
        macro_niebuhr: macro_niebuhr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(G) &kp O &kp D &kp COMMA &kp SPACE &kp G &kp R &kp A &kp N &kp T &kp SPACE &kp M &kp E &kp SPACE &kp T &kp H &kp E &kp SPACE &kp S &kp E &kp R &kp E &kp N &kp I &kp T &kp Y &kp SPACE &kp T &kp O &kp SPACE &kp A &kp C &kp C &kp E &kp P &kp T &kp SPACE &kp T &kp H &kp E &kp SPACE &kp T &kp H &kp I &kp N &kp G &kp S &kp SPACE &kp LS(I) &kp SPACE &kp C &kp A &kp N &kp N &kp O &kp T &kp SPACE &kp C &kp H &kp A &kp N &kp G &kp E &kp COMMA &kp SPACE &kp C &kp O &kp U &kp R &kp A &kp G &kp E &kp SPACE &kp T &kp O &kp SPACE &kp C &kp H &kp A &kp N &kp G &kp E &kp SPACE &kp T &kp H &kp E &kp SPACE &kp T &kp H &kp I &kp N &kp G &kp S &kp SPACE &kp LS(I) &kp SPACE &kp C &kp A &kp N &kp COMMA &kp SPACE &kp A &kp N &kp D &kp SPACE &kp W &kp I &kp S &kp D &kp O &kp M &kp SPACE &kp T &kp O &kp SPACE &kp K &kp N &kp O &kp W &kp SPACE &kp T &kp H &kp E &kp SPACE &kp D &kp I &kp F &kp F &kp E &kp R &kp E &kp N &kp C &kp E &kp DOT>;
            label = "MACRO_NIEBUHR";
        };

        macro_alt_spc_m: macro_alt_spc_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE) &kp M>;
            label = "MACRO_ALT_SPC_M";
        };

        macro_alt_spc_s: macro_alt_spc_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE) &kp S>;
            label = "MACRO_ALT_SPC_S";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&none  &none             &none         &none  &none  &none                                                            &none             &none  &none                   &none                &none                        &none
&none  &kp Q             &kp W         &kp E  &kp R  &kp T                                                            &kp Y             &kp U  &kp I                   &kp O                &kp P                        &none
&none  &kp A             &kp S         &kp D  &kp F  &kp G               &none                 &none                  &kp H             &kp J  &kp K                   &kp L                &mod_morph_minus_underscore  &none
&none  &kp Z             &kp X         &kp C  &kp V  &kp B               &to 5                 &out OUT_TOG           &kp N             &kp M  &mod_morph_exclamation  &mod_morph_question  &kp F10                      &none
&none  &mt LEFT_ALT TAB  &kp LEFT_WIN  &none  &none  &lt 2 INT_MUHENKAN  &mt LEFT_SHIFT SPACE  &mt RIGHT_SHIFT SPACE  &lt 3 INT_HENKAN  &none  &none                   &kp QUESTION         &mt RIGHT_CONTROL TAB        &none
            >;
        };

        layer_1 {
            bindings = <
&none  &none   &none   &none   &none   &none                   &none   &none      &none      &none      &none   &none
&none  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &none   &none   &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &none
&none  &trans  &trans  &none   &none   &trans  &trans  &trans  &trans  &none      &none      &trans     &trans  &none
            >;
        };

        layer_2 {
            bindings = <
&none  &none             &none      &none       &none      &none                              &none          &none           &none           &none            &none            &none
&none  &kp F4            &kp LC(W)  &kp ESCAPE  &kp ENTER  &tap_dance_f1_f11                  &kp CAPSLOCK   &kp HOME        &kp UP_ARROW    &kp END          &kp PRINTSCREEN  &none
&none  &kp LC(A)         &kp LC(S)  &kp DELETE  &kp LC(F)  &tap_dance_f2_f3   &none   &none   &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE       &none
&none  &tap_dance_cz_cy  &kp LC(X)  &kp LC(C)   &kp LC(V)  &kp BACKSPACE      &trans  &trans  &kp ESCAPE     &kp ENTER       &kp PAGE_UP     &kp PAGE_DOWN    &kp GRAVE      　&none
&none  &trans            &trans     &none       &none      &trans             &trans  &trans  &trans         &none           &none           &trans           &trans           &none
            >;
        };

        layer_3 {
            bindings = <
&none  &none                   &none         &none         &none         &none                                     &none          &none           &none           &none            &none                &none
&none  &tap_dance_minus_equal  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &tap_dance_slash_percent                  &kp LS(LG(S))  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &kp LG(PRINTSCREEN)  &none
&none  &kp PLUS                &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK              &none   &none   &mkp MB5       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP         &none
&none  &kp NUMBER_0            &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &tab_dance_period_yen     &trans  &trans  &mkp MB4       &mkp MB3        &msc SCRL_LEFT  &msc SCRL_RIGHT  &msc SCRL_DOWN       &none
&none  &trans                  &trans        &none         &none         &trans                    &trans  &trans  &trans         &none           &none           &trans           &trans               &none
            >;
        };

        layer_4 {
            bindings = <
&none  &none           &none                            &none             &none           &none                   &none    &none                     &none                 &none                  &none          &none
&none  &kp LEFT_WIN    &kp LESS_THAN                    &kp GREATER_THAN  &macro_niebuhr  &kp F5                  &kp F6   &kp CARET                 &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR     &none
&none  &kp LCTRL       &tap_dance_exclamation_question  &kp EQUAL         &kp AT_SIGN     &kp F7  &none   &none   &kp F8   &tap_dance_single_double  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE      &none
&none  &kp LEFT_SHIFT  &kp AMPERSAND                    &kp PIPE          &kp HASH        &kp F9  &trans  &trans  &kp F12  &kp SLASH                 &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &none
&none  &trans          &trans                           &none             &none           &trans  &trans  &trans  &trans   &none                     &none                 &trans                 &trans         &none
            >;
        };

        layer_5 {
            bindings = <
&none  &none   &none   &none  &none  &none                            &none           &none         &none         &none         &none         &none
&none  &kp Q   &kp W   &kp E  &kp R  &kp T                            &bt BT_CLR_ALL  &none         &none         &none         &bt BT_CLR    &none
&none  &kp A   &kp S   &kp D  &kp F  &kp G            &none   &none   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &kp Z   &kp X   &kp C  &kp V  &kp B            &to 0   &trans  &none           &none         &bt BT_PRV    &bt BT_NXT    &none         &none
&none  &trans  &trans  &none  &none  &mt LCTRL SPACE  &trans  &trans  &trans          &none         &none         &trans        &trans        &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        condition {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
