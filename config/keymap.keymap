#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    behaviors {
        mod_morph_minus_underscore: mod_morph_minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MINUS_UNDERSCORE";
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        tap_dance_comma_semicolon: tap_dance_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COMMA_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            tapping-term-ms = <180>;
        };

        tap_dance_period_colon: tap_dance_period_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PERIOD_COLON";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;

            tapping-term-ms = <180>;
        };

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_EXCLAMATION";
            bindings = <&tap_dance_comma_semicolon>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_QUESTION";
            bindings = <&tap_dance_period_colon>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        tap_dance_f1_f11: tap_dance_f1_f11 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F1_F11";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F11>;

            tapping-term-ms = <180>;
        };

        tap_dance_f2_f3: tap_dance_f2_f3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F2_F3";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp F2>, <&kp F3>;
        };

        tap_dance_cz_cy: tap_dance_cz_cy {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CZ_CY";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&none  &none             &none         &none  &none  &none                                                            &none             &none  &none                   &none                &none                        &none
&none  &kp Q             &kp W         &kp E  &kp R  &kp T                                                            &kp Y             &kp U  &kp I                   &kp O                &kp P                        &none
&none  &kp A             &kp S         &kp D  &kp F  &kp G               &none                 &none                  &kp H             &kp J  &kp K                   &kp L                &mod_morph_minus_underscore  &none
&none  &kp Z             &kp X         &kp C  &kp V  &kp B               &kp QUESTION          &kp QUESTION           &kp N             &kp M  &mod_morph_exclamation  &mod_morph_question  &kp F10                      &none
&none  &mt LEFT_ALT TAB  &kp LEFT_WIN  &none  &none  &lt 2 INT_MUHENKAN  &mt LEFT_SHIFT SPACE  &mt RIGHT_SHIFT SPACE  &lt 3 INT_HENKAN  &none  &none                   &kp QUESTION         &mt RIGHT_CONTROL TAB        &none
            >;
        };

        layer_1 {
            bindings = <
&none  &none   &none   &none   &none   &none                   &none   &none      &none      &none      &none   &none
&none  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &none   &none   &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &none
&none  &trans  &trans  &none   &none   &trans  &trans  &trans  &trans  &none      &none      &trans     &trans  &none
            >;
        };

        layer_2 {
            bindings = <
&none  &none             &none      &none       &none      &none                              &none          &none           &none           &none            &none                    &none
&none  &kp F4            &kp LC(W)  &kp ESCAPE  &kp ENTER  &tap_dance_f1_f11                  &kp CAPSLOCK   &kp HOME        &kp UP_ARROW    &kp END          &kp PRINTSCREEN          &none
&none  &kp LC(A)         &kp LC(S)  &kp DELETE  &kp LC(F)  &tap_dance_f2_f3   &none   &none   &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE               &none
&none  &tap_dance_cz_cy  &kp LC(X)  &kp LC(C)   &kp LC(V)  &kp BACKSPACE      &trans  &trans  &kp ESCAPE     &kp ENTER       &kp PAGE_UP     &kp PAGE_DOWN    &kp LANG_ZENKAKUHANKAKU  &none
&none  &trans            &trans     &none       &none      &trans             &trans  &trans  &trans         &none           &none           &trans           &trans                   &none
            >;
        };

        layer_3 {
            bindings = <
&none  &none    &none    &none         &none         &none                       &none             &none      &none          &none      &none       &none
&none  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                      &kp HOME          &kp PG_UP  &kp PAGE_DOWN  &kp END    &kp ESCAPE  &none
&none  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10     &none   &none   &kp LEFT          &kp DOWN   &kp UP_ARROW   &kp RIGHT  &kp TAB     &none
&none  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans  &trans  &kp SINGLE_QUOTE  &kp DQT    &kp GRAVE      &kp TILDE  &kp PIPE    &none
&none  &trans   &trans   &none         &none         &trans      &trans  &trans  &trans            &none      &none          &trans     &trans      &none
            >;
        };
    };
};
